{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Database Object Lineage Schema",
  "description": "A generalized schema to describe lineage relationships and usage of database objects such as tables, procedures, functions, and triggers.",
  "type": "object",
  "patternProperties": {
    "^[a-zA-Z0-9_#\\.]+$": {
      "$ref": "#/$defs/databaseObject"
    }
  },
  "additionalProperties": false,
  "$defs": {
    "databaseObject": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the database object.",
          "type": "string",
          "enum": [
            "procedure",
            "table",
            "function",
            "trigger"
          ]
        },
        "calls": {
          "description": "Outgoing lineage: A list of objects that this procedure, function, or trigger calls.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "called_by": {
          "description": "For tables: A list of all procedures, functions, or triggers that reference this table.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "called_by_procedure": {
          "description": "Incoming lineage: A list of procedures that call this procedure or function.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "called_by_function": {
          "description": "Incoming lineage: A list of functions that call this procedure or function.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "called_by_trigger": {
          "description": "Incoming lineage: A list of triggers that call this procedure or function.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "columns": {
          "description": "For tables, a list of columns and their specific usage.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/columnDetail"
          }
        },
        "on_table": {
          "description": "For triggers, the table it is attached to.",
          "type": "string"
        },
        "event": {
          "description": "For triggers, the event that fires it (e.g., AFTER INSERT).",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "table" } } },
          "then": { "required": [ "called_by", "columns" ] }
        },
        {
          "if": { "properties": { "type": { "const": "procedure" } } },
          "then": { "required": [ "calls", "called_by_procedure", "called_by_function", "called_by_trigger" ] }
        },
        {
          "if": { "properties": { "type": { "const": "function" } } },
          "then": { "required": [ "calls", "called_by_procedure", "called_by_function", "called_by_trigger" ] }
        },
        {
          "if": { "properties": { "type": { "const": "trigger" } } },
          "then": { "required": [ "on_table", "event", "calls" ] }
        }
      ]
    },
    "columnDetail": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the column.",
          "type": "string"
        },
        "usage": {
          "description": "Describes how the column is accessed.",
          "type": "string",
          "enum": [
            "read",
            "write"
          ]
        },
        "caller": {
          "description": "The name of the object (procedure, function, or trigger) that is accessing this column.",
          "type": "string"
        },
        "caller_type": {
          "description": "The type of the calling object.",
          "type": "string",
          "enum": [
            "procedure",
            "function",
            "trigger"
          ]
        }
      },
      "required": [
        "name",
        "usage",
        "caller",
        "caller_type"
      ]
    }
  }
}